generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  password     String   @map("password")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Villa {
  id              Int            @id @default(autoincrement())
  villaNumber     String         @unique @map("villa_number")
  residentName    String?        @map("resident_name")
  occupancyType   OccupancyType  @default(VACANT) @map("occupancy_type")
  isActive        Boolean        @default(true) @map("is_active")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  // Relations
  payments        Payment[]

  @@map("villas")
}

model PaymentCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  isRecurring    Boolean  @default(true) @map("is_recurring")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  payments    Payment[]

  @@map("payment_categories")
}

model Payment {
  id                 Int             @id @default(autoincrement())
  villaId            Int             @map("villa_id")
  categoryId         Int?            @map("category_id")
  receivableAmount   Decimal         @db.Decimal(10, 2) @map("receivable_amount")
  receivedAmount     Decimal         @db.Decimal(10, 2) @map("received_amount")
  paymentDate        DateTime        @map("payment_date")
  paymentMonth       Int             @map("payment_month")
  paymentYear        Int             @map("payment_year")
  paymentMethod      PaymentMethod   @default(CASH) @map("payment_method")
  notes              String?         @db.Text
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")

  // Relations
  villa              Villa           @relation(fields: [villaId], references: [id])
  category           PaymentCategory? @relation(fields: [categoryId], references: [id])

  @@index([villaId, paymentDate])
  @@index([paymentMonth, paymentYear])
  @@map("payments")
}

model Expense {
  id            Int           @id @default(autoincrement())
  category      String
  description   String        @db.Text
  amount        Decimal       @db.Decimal(10, 2)
  expenseDate   DateTime      @map("expense_date")
  expenseMonth  Int           @map("expense_month")
  expenseYear   Int           @map("expense_year")
  paymentMethod PaymentMethod @default(CASH) @map("payment_method")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@index([expenseMonth, expenseYear])
  @@index([category])
  @@map("expenses")
}

model MonthlyBalance {
  id               Int      @id @default(autoincrement())
  month            Int
  year             Int
  totalReceipts    Decimal  @db.Decimal(15, 2) @map("total_receipts")
  totalExpenses    Decimal  @db.Decimal(15, 2) @map("total_expenses")
  previousBalance  Decimal  @db.Decimal(15, 2) @map("previous_balance")
  currentBalance   Decimal  @db.Decimal(15, 2) @map("current_balance")
  isGenerated      Boolean  @default(false) @map("is_generated")
  generatedAt      DateTime? @map("generated_at")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@unique([month, year])
  @@index([year, month])
  @@map("monthly_balances")
}

enum OccupancyType {
  OWNER
  TENANT
  VACANT
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHEQUE
  ONLINE
}